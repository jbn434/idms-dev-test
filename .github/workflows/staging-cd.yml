name: Deploy License API

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: "dev"
      ROLLBACK_TAG:
        description: 'Optional: Previous build tag (e.g., 2025.06.30.02). If left blank, deploys latest.'
        required: false

env:
  AWS_REGION: us-east-1
  TF_BUCKET: my-terraform-state-bckt43
  BACKUP_BUCKET: idlms-website-built-artifact

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Apply VPC
        run: |
          cd infra/vpc
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/vpc/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply NLB
        run: |
          cd infra/nlb
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/nlb/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply API Gateway
        run: |
          cd infra/http-api
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/http-api/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply CloudWatch
        run: |
          cd infra/cloudwatch
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/cloudwatch/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      - name: Terraform Apply ECR
        id: ecr
        run: |
          cd infra/ecr
          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/ecr/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
          RAW_OUTPUT=$(terraform output -raw ecr_repository_url 2>&1)
          ECR_REPO_URL=$(${TERRAFORM_CLI_PATH}/terraform-bin output -raw ecr_repository_url)
          echo "Raw Terraform Output: [$RAW_OUTPUT]"

          #ECR_REPO_URL=$(terraform output -raw ecr_repository_url | xargs)
          #ECR_REPO_URL1=$(terraform output -raw ecr_repository_url | xargs)
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV
          echo $ECR_REPO_URL
          echo $GITHUB_ENV

      - name: Terraform Apply SSM
        id: ssm
        run: |
          cd infra/ssm
          ENV_CONTENT=$(aws ssm get-parameter \
            --name "/idlms/shared/${{ github.event.inputs.ENV }}/.env" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)

          BASE64_ENV=$(echo "$ENV_CONTENT" | base64 -w 0)

          terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${{ github.event.inputs.ENV }}/ssm/terraform.tfstate"
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars" -var="app_env_content=${BASE64_ENV}"
          SSM_ENV_PARAM=$(terraform output -raw ssm_env_param_name | tr -d '\r\n' | sed 's/^ssm:\/\///')

          #echo "SSM_ENV_PARAM=${SSM_ENV_PARAM}" >> $GITHUB_ENV
          #SSM_ENV_PARAM=$(cd infra/ssm && terraform output -raw ssm_env_param_name | tr -d '\r\n' | sed 's#^ssm://##')
          echo "SSM_ENV_PARAM=$SSM_ENV_PARAM"
          echo "SSM_ENV_PARAM=$SSM_ENV_PARAM" >> $GITHUB_ENV


          #SSM_ENV_PARAM=$(terraform output -raw ssm_env_param_name | tr -d '\r\n' | sed 's/^ssm://')

          #echo "SSM_ENV_PARAM=${SSM_ENV_PARAM}" >> $GITHUB_ENV

      - name: Print ECR URL
        run: echo "Using ECR:$ECR_REPO_URL"
        env:
          ECR_REPO_URL: ${{ env.ECR_REPO_URL }}



      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate build tags
        id: tags
        run: |
          #ECR_REPO_URL=$(/home/runner/work/_temp/5fb89a93-29a6-4999-af6e-8ca5aa1a0535/terraform-bin output -raw ecr_repository_url)
          ECR_REPO_URL="${{ env.ECR_REPO_URL }}"
          DATE_TAG=$(date +'%Y.%m.%d')
          BUILD_NUM=$(printf "%03d" $GITHUB_RUN_NUMBER)
          BUILD_TAG="${DATE_TAG}.${BUILD_NUM}"
          IMAGE_URI="${ECR_REPO_URL}:${BUILD_TAG}"
          LATEST_URI="${ECR_REPO_URL}:latest"

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "LATEST_URI=$LATEST_URI" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: |
          docker build -t $IMAGE_URI -t $LATEST_URI -f docker/Dockerfile src

      - name: Push Docker images to ECR
        run: |
          docker push $IMAGE_URI
          docker push $LATEST_URI

      - name: Update last successful build in SSM
        run: |
          aws ssm put-parameter \
            --name "/idlms/license-api/last-successful-build" \
            --value "$BUILD_TAG" \
            --type String \
            --overwrite

      - name: Deploy to EC2 via SSM
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Backend API IDLMS-${{ github.event.inputs.ENV }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ ERROR: No running EC2 instance found with tag Backend API IDLMS-${{ github.event.inputs.ENV }}"
            exit 1
          fi

          echo "Deploying to instance: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          
              ENV_PATH="/idlms/shared/${ENV}/.env"
              aws ssm send-command \
               --instance-ids "$INSTANCE_ID" \
               --document-name "AWS-RunShellScript" \
               --comment "Retrieve .env from SSM inside EC2" \
               --parameters "commands=[
                 \"set -e\",
                 \"echo 'Fetching .env from SSM: ${ENV_PATH}'\",
                 \"ENV=\$(aws ssm get-parameter --name '${ENV_PATH}' --with-decryption --query 'Parameter.Value' --output text)\",
                 \"echo 'Fetched ENV length: \${#ENV}'\",
                 \"echo \\\"\$ENV\\\" > /home/ubuntu/.env\",
                 \"echo 'BUILD_TAG=${BUILD_TAG}' >> /home/ubuntu/.env\"
               ]"

          # Upload docker-compose.yml to S3
          aws s3 cp docker/docker-compose.yml s3://${BACKUP_BUCKET}/${{ github.event.inputs.ENV }}/docker-compose.yml

          # Trigger EC2 to pull docker-compose.yml from S3
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$INSTANCE_ID" \
            --comment "Download docker-compose.yml from S3" \
            --parameters 'commands=["aws s3 cp s3://'"$BACKUP_BUCKET"'/'"${{ github.event.inputs.ENV }}"'/docker-compose.yml /home/ubuntu/docker-compose.yml"]' \
            --region $AWS_REGION \
            --output text

           # Restart Docker containers using new docker-compose.yml
            aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Pull and restart License API with latest image" \
            --parameters 'commands=[
              "set -e",
              "aws ecr get-login-password --region '${AWS_REGION}' | docker login --username AWS --password-stdin '${ECR_REPO_URL%/*}'",
              "cd /home/ubuntu/",
              "docker-compose pull",
              "docker-compose down",
              "docker-compose up -d"
            ]' \
            --timeout-seconds 900 \
            --region $AWS_REGION \
